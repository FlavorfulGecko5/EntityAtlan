#pragma once
#include <string>
#include <cstdint>
#include <unordered_map>

class BinaryReader;

struct deserializer {
	void (*callback)(BinaryReader& reader, std::string& writeto) = nullptr;
	const char* name = nullptr;
	int arrayLength = 0; // If > 0, treat this as a static array

	void Exec(BinaryReader& reader, std::string& writeTo) const;
};

struct deserialTypeInfo {
	void(*callback)(BinaryReader& reader, std::string& writeTo) = nullptr;
	const char* name = nullptr;
};

namespace deserial {

	/* Generated by reflection code */
	extern const std::unordered_map<uint32_t, deserialTypeInfo> typeInfoPtrMap;
	extern const std::unordered_map<uint64_t, const char*> declHashMap;

	/* Debugging */
	void ds_debugging();
	int ds_debugWarningCount();

	/* Entry Points */
	void ds_start_entitydef(BinaryReader& reader, std::string& writeTo);

	/* Common Types */
	void ds_pointerbase(BinaryReader& reader, std::string& writeTo);
	void ds_pointerdecl(BinaryReader& reader, std::string& writeTo);
	void ds_idTypeInfoPtr(BinaryReader& reader, std::string& writeTo);
	void ds_idTypeInfoObjectPtr(BinaryReader& reader, std::string& writeTo);
	void ds_enumbase(BinaryReader& reader, std::string& writeTo, const std::unordered_map<uint64_t, const char*>& enumMap);
	void ds_blockbase(BinaryReader& reader, std::string& writeTo, const std::unordered_map<uint64_t, deserializer>& propMap);
	void ds_structbase(BinaryReader& reader, std::string& writeTo, const std::unordered_map<uint64_t, deserializer>& propMap);
	void ds_idList(BinaryReader& reader, std::string& writeTo, void(*callback)(BinaryReader& reader, std::string& writeTo));
	void ds_staticList(BinaryReader& reader, std::string& writeTo, deserializer basetype);
	void ds_idListMap(BinaryReader& reader, std::string& writeTo, void(*keyfunc)(BinaryReader& reader, std::string& writeTo), void(*valuefunc)(BinaryReader& reader, std::string& writeTo));
	
	/* Manually Implemented Structs */
	void ds_idStr(BinaryReader& reader, std::string& writeTo);
	void ds_idLogicProperties(BinaryReader& reader, std::string& writeTo);

	/* Primitive Types */
	void ds_bool(BinaryReader& reader, std::string& writeTo);
	void ds_char(BinaryReader& reader, std::string& writeTo);
	void ds_unsigned_char(BinaryReader& reader, std::string& writeTo);
	void ds_wchar_t(BinaryReader& reader, std::string& writeTo);
	void ds_short(BinaryReader& reader, std::string& writeTo);
	void ds_unsigned_short(BinaryReader& reader, std::string& writeTo);
	void ds_int(BinaryReader& reader, std::string& writeTo);
	void ds_unsigned_int(BinaryReader& reader, std::string& writeTo);
	void ds_long(BinaryReader& reader, std::string& writeTo);
	void ds_long_long(BinaryReader& reader, std::string& writeTo);
	void ds_unsigned_long(BinaryReader& reader, std::string& writeTo);
	void ds_unsigned_long_long(BinaryReader& reader, std::string& writeTo);
	void ds_float(BinaryReader& reader, std::string& writeTo);
	void ds_double(BinaryReader& reader, std::string& writeTo);

};

